{"name": "test_item_use[500-50-50-50-50-2-301-HEALTH_IS_NOT_0-except_msg8]", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <testcases.pet_api_test.test_06_item.TestItem object at 0x0000028F6EEBB130>\npet_login_hasrole_fixture = {'code': 'SUCCESS', 'data': {'role_created': True, 'token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2Njg0ODQy...mZSIsImFpZCI6IjYzNjBiZjhlZjM2YzAxMzQ1NjRkYjM1YyIsImV4Y2x1c2l2ZSI6dHJ1ZX0.nlykJgxXQd6JxuAUaGByxS_MvvcfH_r7qjiLESVAQ8c'}}\ngold = 500, hunger = 50, heath = 50, clean = 50, mood = 50, Class = 2, ID = 301\nexcept_code = 'HEALTH_IS_NOT_0', except_msg = {}\n\n    @allure.story(\"用例--使用物品\")\n    @allure.description(\"该用例是使用物品的测试\")\n    @pytest.mark.single\n    @pytest.mark.smoke\n    @pytest.mark.parametrize(\"gold,hunger,heath,clean,mood,Class, ID, except_code, except_msg\",\n                             pet_data[\"test_item_use\"])\n    def test_item_use(self, pet_login_hasrole_fixture, gold, hunger, heath, clean, mood, Class, ID, except_code,\n                      except_msg):\n        logger.info(\"*************** 开始执行用例 ***************\")\n        pet_info = pet_login_hasrole_fixture\n        token = pet_info[\"data\"][\"token\"]\n        step_item_use(gold, hunger, heath, clean, mood, Class, ID)\n        gm = GM(token)\n        gm.gm_gold(gold)\n        gm.gm_mood(mood)\n        gm.gm_clean(clean)\n        gm.gm_heath(heath)\n        gm.gm_hunger(hunger)\n        gm.moditem_list()\n>       result = item_use(token, Class, ID)\n\ntest_06_item.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\operation\\item.py:82: in item_use\n    if res.json()[\"code\"] == \"SUCCESS\":\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\requests\\models.py:897: in json\n    return complexjson.loads(self.text, **kwargs)\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000028F5704DEE0>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\json\\decoder.py:355: JSONDecodeError"}, "description": "该用例是使用物品的测试", "steps": [{"name": "前置步骤 ==>> 设置数据", "status": "passed", "parameters": [{"name": "gold", "value": "500"}, {"name": "hunger", "value": "50"}, {"name": "heath", "value": "50"}, {"name": "clean", "value": "50"}, {"name": "mood", "value": "50"}, {"name": "Class", "value": "2"}, {"name": "ID", "value": "301"}], "start": 1667879479865, "stop": 1667879479865}], "attachments": [{"name": "log", "source": "3ba0a5d0-e76c-4132-92d3-b1c559bed50f-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "de94e86f-f3e4-4edd-86b4-87fe572525f1-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "e799201f-e21e-414d-93b8-303c1342e357-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "gold", "value": "500"}, {"name": "hunger", "value": "50"}, {"name": "heath", "value": "50"}, {"name": "clean", "value": "50"}, {"name": "mood", "value": "50"}, {"name": "Class", "value": "2"}, {"name": "ID", "value": "301"}, {"name": "except_code", "value": "'HEALTH_IS_NOT_0'"}, {"name": "except_msg", "value": "{}"}], "start": 1667879479865, "stop": 1667879480159, "uuid": "8e2db361-d68d-497c-a761-1f9ea32d5d62", "historyId": "774829b7d85068a66c31835d6cf051ba", "testCaseId": "630e494eca10d08e9ce13d9e1e009ca7", "fullName": "testcases.pet_api_test.test_06_item.TestItem#test_item_use", "labels": [{"name": "story", "value": "用例--使用物品"}, {"name": "severity", "value": "trivial"}, {"name": "epic", "value": "针对单个接口的测试"}, {"name": "feature", "value": "物品模块"}, {"name": "tag", "value": "single"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "testcases.pet_api_test"}, {"name": "suite", "value": "test_06_item"}, {"name": "subSuite", "value": "TestItem"}, {"name": "host", "value": "cy"}, {"name": "thread", "value": "9460-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.pet_api_test.test_06_item"}]}
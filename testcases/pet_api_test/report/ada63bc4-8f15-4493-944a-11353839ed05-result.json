{"name": "test_health_data[0-0-0-100-10]", "status": "failed", "statusDetails": {"message": "AssertionError: assert 80 == 70\n  -80\n  +70", "trace": "self = <testcases.pet_api_test.test_11_data.TestData object at 0x0000029CC3069D90>\npet_login_hasrole_fixture = {'code': 'SUCCESS', 'data': {'role_created': True, 'token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2Njg0Nzg1...5YSIsImFpZCI6IjYzNjBiZjhlZjM2YzAxMzQ1NjRkYjM1YyIsImV4Y2x1c2l2ZSI6dHJ1ZX0.DmlDKAh2ftxv7r5-WTkyf8Ho6_WB9gNKLUlzrgt5MLU'}}\nhunger = 0, mood = 0, clean = 0, init_value = 100, interval_time = 10\n\n    @allure.story(\"用例--健康值数值测试\")\n    @allure.description(\"该用例是健康值数值的测试\")\n    @pytest.mark.single\n    @pytest.mark.smoke\n    @pytest.mark.parametrize(\"hunger,mood,clean,init_value,interval_time\", pet_data[\"test_health_data\"])\n    def test_health_data(self, pet_login_hasrole_fixture, hunger, mood, clean, init_value, interval_time):\n        logger.info(\"*************** 开始执行用例 ***************\")\n        pet_info = pet_login_hasrole_fixture\n        token = pet_info[\"data\"][\"token\"]\n        update(token)\n        gm = GM(token)\n        gm.gm_hunger(hunger)\n        gm.gm_mood(mood)\n        gm.gm_clean(clean)\n        gm.gm_heath(init_value)\n        gm.moditem_list()\n        now_timestamp = redis_db.get_health_timestamp(account_id)\n        reduce = 0\n        if hunger == 0 and mood == 0 and clean == 0:\n            reduce = int(get_pet_config.get_HealthConfig()[\"reduce_2\"])\n        elif (hunger == 0 and mood == 0) or (hunger == 0 and clean == 0) or (mood == 0 and clean == 0):\n            reduce = int(get_pet_config.get_HealthConfig()[\"reduce_1\"])\n        elif hunger == 0 or mood == 0 or clean == 0:\n            reduce = int(get_pet_config.get_HealthConfig()[\"reduce_0\"])\n        elif hunger != 0 and mood != 0 and clean != 0:\n            reduce = 0\n        else:\n            logger.info(\"取值错误，请检查用例\")\n        except_data = init_value - int(interval_time * reduce)\n        if except_data < 0:\n            except_data = 0\n        set_timestamp = now_timestamp - interval_time * get_pet_config.get_HealthConfig()[\"time\"]\n        redis_db.set_health_timestamp(account_id, int(set_timestamp))\n        redis_db.set_system_timestamp(account_id, int(set_timestamp))  # 系统时间也要一起修改\n        step_health_data_value(hunger, mood, clean, init_value, interval_time, reduce, except_data)\n        result = update(token)\n        assert result.response.status_code == 200\n        if result.response.json().get(\"code\") == \"SUCCESS\":\n            items = result.response.json().get(\"data\").get(\"items\")\n            for i in items:\n                if i.get(\"item_id\") == 113:\n                    logger.info(\n                        \"hunger ==>> 期望结果：{}， 实际结果：{}\".format(except_data, i.get(\"number\")))\n>                   assert i.get(\"number\") == except_data\nE                   assert 80 == 70\nE                     -80\nE                     +70\n\ntest_11_data.py:188: AssertionError"}, "description": "该用例是健康值数值的测试", "steps": [{"name": "前置步骤 ==>> 设置数据", "status": "passed", "parameters": [{"name": "hunger", "value": "0"}, {"name": "mood", "value": "0"}, {"name": "clean", "value": "0"}, {"name": "init_value", "value": "100"}, {"name": "interval_time", "value": "10"}, {"name": "reduce_value", "value": "3"}, {"name": "except_value", "value": "70"}], "start": 1667873723623, "stop": 1667873723623}], "attachments": [{"name": "log", "source": "c260f7fd-d2af-4bf5-8e91-5c56407c3643-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "3dad5807-7be7-4911-adce-264eced10146-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "015f4b7b-5613-4948-b91e-524b5fabe5de-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "hunger", "value": "0"}, {"name": "mood", "value": "0"}, {"name": "clean", "value": "0"}, {"name": "init_value", "value": "100"}, {"name": "interval_time", "value": "10"}], "start": 1667873723177, "stop": 1667873723783, "uuid": "61f8a055-e8a1-49ad-8bbb-561d585d622a", "historyId": "dfb232039756085932198b83dc3600c5", "testCaseId": "bf85a9006e2556a3f6d02f8b8eeaa828", "fullName": "testcases.pet_api_test.test_11_data.TestData#test_health_data", "labels": [{"name": "story", "value": "用例--健康值数值测试"}, {"name": "epic", "value": "针对单个接口的测试"}, {"name": "severity", "value": "trivial"}, {"name": "feature", "value": "数值模块"}, {"name": "tag", "value": "single"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "testcases.pet_api_test"}, {"name": "suite", "value": "test_11_data"}, {"name": "subSuite", "value": "TestData"}, {"name": "host", "value": "cy"}, {"name": "thread", "value": "7956-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.pet_api_test.test_11_data"}]}
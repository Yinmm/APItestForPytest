{"name": "test_clean_data[100-0.3]", "status": "failed", "statusDetails": {"message": "AssertionError: assert 99 == 100\n  -99\n  +100", "trace": "self = <testcases.pet_api_test.test_11_data.TestData object at 0x0000016AC7FB03A0>\npet_login_hasrole_fixture = {'code': 'SUCCESS', 'data': {'role_created': True, 'token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2Njg0MjI0...kZCIsImFpZCI6IjYzNjBiZjhlZjM2YzAxMzQ1NjRkYjM1YyIsImV4Y2x1c2l2ZSI6dHJ1ZX0.0BkA6OLKidR1mOKXXeb32rkqq89pD1dcaCfQZPjbiWs'}}\ninit_value = 100, interval_time = 0.3\n\n    @allure.story(\"用例--清洁值数值测试\")\n    @allure.description(\"该用例是清洁值数值的测试\")\n    @pytest.mark.single\n    @pytest.mark.smoke\n    @pytest.mark.parametrize(\"init_value, interval_time\", pet_data[\"test_data\"])\n    def test_clean_data(self, pet_login_hasrole_fixture, init_value, interval_time):\n        logger.info(\"*************** 开始执行用例 ***************\")\n        pet_info = pet_login_hasrole_fixture\n        token = pet_info[\"data\"][\"token\"]\n        update(token)\n        gm = GM(token)\n        gm.gm_clean(init_value)\n        gm.moditem_list()\n        now_timestamp = redis_db.get_clean_timestamp(account_id)\n        reduce = int(get_pet_config.get_CleanConfig()[\"reduce\"])\n        except_data = init_value - int(interval_time * reduce)\n        if except_data < 0:\n            except_data = 0\n        set_timestamp = now_timestamp - interval_time * get_pet_config.get_CleanConfig()[\"time\"]\n        redis_db.set_clean_timestamp(account_id, int(set_timestamp))\n        redis_db.set_system_timestamp(account_id, int(set_timestamp))  # 系统时间也要一起修改\n        step_data_value(init_value, interval_time, reduce, except_data)\n        result = update(token)\n        assert result.response.status_code == 200\n        if result.response.json().get(\"code\") == \"SUCCESS\":\n            items = result.response.json().get(\"data\").get(\"items\")\n            for i in items:\n                if i.get(\"item_id\") == 101:\n                    logger.info(\n                        \"hunger ==>> 期望结果：{}， 实际结果：{}\".format(except_data, i.get(\"number\")))\n>                   assert i.get(\"number\") == except_data\nE                   assert 99 == 100\nE                     -99\nE                     +100\n\ntest_11_data.py:105: AssertionError"}, "description": "该用例是清洁值数值的测试", "steps": [{"name": "前置步骤 ==>> 设置数据", "status": "passed", "parameters": [{"name": "init_hunger", "value": "100"}, {"name": "interval_time", "value": "0.3"}, {"name": "reduce_value", "value": "1"}, {"name": "except_value", "value": "100"}], "start": 1667817614208, "stop": 1667817614208}], "attachments": [{"name": "log", "source": "c62aaf09-b73b-43bf-8f3c-2e92f99c05ba-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "f192be5a-c304-46d7-9ca5-24013427b2fe-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "e05ee3af-cb3a-4d08-ba7e-edaf44103d39-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "init_value", "value": "100"}, {"name": "interval_time", "value": "0.3"}], "start": 1667817613770, "stop": 1667817614340, "uuid": "7510b22a-79fb-45ad-a91f-7a677bb25f1b", "historyId": "81c97f8bdcb90f3da89ddac6a9b66f55", "testCaseId": "5d4aecaee3126ff822d32388b10a675f", "fullName": "testcases.pet_api_test.test_11_data.TestData#test_clean_data", "labels": [{"name": "severity", "value": "trivial"}, {"name": "epic", "value": "针对单个接口的测试"}, {"name": "feature", "value": "数值模块"}, {"name": "story", "value": "用例--清洁值数值测试"}, {"name": "tag", "value": "smoke"}, {"name": "tag", "value": "single"}, {"name": "parentSuite", "value": "testcases.pet_api_test"}, {"name": "suite", "value": "test_11_data"}, {"name": "subSuite", "value": "TestData"}, {"name": "host", "value": "cy"}, {"name": "thread", "value": "9900-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.pet_api_test.test_11_data"}]}